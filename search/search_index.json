{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 PyBase is a DataBase Manager for JSON, YAML and SQLite. It's focused on the ease and effectiveness for the administration of databases. PyBase is actually on Beta phase, may contain bugs. Why PyBase? \u00b6 If you want to store static data (JSON, YAML) or store a database in SQLite, the best thing would be to use an administrator that simplifies your tasks and helps you with a good organization and efficiently. PyBase does exactly that, allows you to create such databases with just one method, and simplifies the task of manipulating their data! PyBase doesn't yet support SQLite, it will be added soon. Quick start \u00b6 Usage example \u00b6 This is a brief example of some methods that PyBase currently has. # Lets import PyBase Class from PyBase Package from pybase_db import PyBase # Lets define our database name and format (with default db_path). # db_type isn't case sensitive. You can use JSON and json and it'll be valid. db = PyBase ( \"example\" , \"JSON\" ) #=> ./example.json # Lets define and add some content to our database. pybase_info = { \"pybase\" : \"awesomeness\" , \"version\" : \"0.1.0\" } # Lets insert the defined dict inside our database. db . insert ( pybase_info ) #=> {'pybase': 'awesomeness', 'version': '0.0.1'} print ( db . read ()) Documentation \u00b6 You can see the PyBase documentation through the help() function of the REPL and through the official documentation site . License \u00b6 PyBase is distributed under MIT License. Contributing \u00b6 When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Please note we have a code of conduct, please follow it in all your interactions with the project. Pull Request Process \u00b6 Ensure any install or build dependencies are removed before the end of the layer when doing a build. Update the README.md with details of changes to the interface, this includes new environment variables, exposed ports, useful file locations and container parameters. Increase the version numbers in any examples files and the README.md to the new version that this Pull Request would represent. The versioning scheme we use is SemVer . You may merge the Pull Request in once you have the sign-off of two other developers, or if you do not have permission to do that, you may request the second reviewer to merge it for you. Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at bloodbathalchemist@protonmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Home"},{"location":"#home","text":"PyBase is a DataBase Manager for JSON, YAML and SQLite. It's focused on the ease and effectiveness for the administration of databases. PyBase is actually on Beta phase, may contain bugs.","title":"Home"},{"location":"#why-pybase","text":"If you want to store static data (JSON, YAML) or store a database in SQLite, the best thing would be to use an administrator that simplifies your tasks and helps you with a good organization and efficiently. PyBase does exactly that, allows you to create such databases with just one method, and simplifies the task of manipulating their data! PyBase doesn't yet support SQLite, it will be added soon.","title":"Why PyBase?"},{"location":"#quick-start","text":"","title":"Quick start"},{"location":"#usage-example","text":"This is a brief example of some methods that PyBase currently has. # Lets import PyBase Class from PyBase Package from pybase_db import PyBase # Lets define our database name and format (with default db_path). # db_type isn't case sensitive. You can use JSON and json and it'll be valid. db = PyBase ( \"example\" , \"JSON\" ) #=> ./example.json # Lets define and add some content to our database. pybase_info = { \"pybase\" : \"awesomeness\" , \"version\" : \"0.1.0\" } # Lets insert the defined dict inside our database. db . insert ( pybase_info ) #=> {'pybase': 'awesomeness', 'version': '0.0.1'} print ( db . read ())","title":"Usage example"},{"location":"#documentation","text":"You can see the PyBase documentation through the help() function of the REPL and through the official documentation site .","title":"Documentation"},{"location":"#license","text":"PyBase is distributed under MIT License.","title":"License"},{"location":"#contributing","text":"When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Please note we have a code of conduct, please follow it in all your interactions with the project.","title":"Contributing"},{"location":"#pull-request-process","text":"Ensure any install or build dependencies are removed before the end of the layer when doing a build. Update the README.md with details of changes to the interface, this includes new environment variables, exposed ports, useful file locations and container parameters. Increase the version numbers in any examples files and the README.md to the new version that this Pull Request would represent. The versioning scheme we use is SemVer . You may merge the Pull Request in once you have the sign-off of two other developers, or if you do not have permission to do that, you may request the second reviewer to merge it for you.","title":"Pull Request Process"},{"location":"#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at bloodbathalchemist@protonmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"getting-started/","text":"Getting Started \u00b6 This is a short introduction to PyBase that contains installation and a sample code (you can also see it in GH). Current PyBase version and status: ( v0.1.0 - Beta ). Installing PyBase \u00b6 Before starting, you have to know that PyBase doesn't have support for Python 2.7, only Python 3 onwards. PyBase can be installed through pip with the following command. pip install pybase_db Creating our first db with pybase \u00b6 With the example extracted from GH, we can do the following. #-------------- Importing PyBase Class --------------------------------------- # Lets import PyBase Class from PyBase Package from pybase_db import PyBase # #-------------- Initializing PyBase ------------------------------------------ # Lets define our database name and format (with default db_path). # db_type isn't case sensitive. You can use JSON and json and it'll be valid. db = PyBase ( \"example\" , \"JSON\" ) #=> ./example.json # #-------------- Using Insert Method ------------------------------------------ # Lets define and add some content to our database. pybase_info = { \"pybase\" : \"awesomeness\" , \"version\" : \"0.1.0\" } # Lets insert the defined dict inside our database. db . insert ( pybase_info ) #=> {'pybase': 'awesomeness', 'version': '0.1.0'} print ( db . read ()) # #-------------- Using Delete Method ------------------------------------------ # Lets delete an object inside our database cuz it's useless. db . delete ( 'pybase' ) #=> {'version': '0.1.0'} print ( db . read ()) # #-------------- Using Fetch Method ------------------------------------------- # Lets fetch an object inside our database and display its type. # It's useful to debug and manipulate the data dynamically. print ( db . fetch ( 'version' ))","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"This is a short introduction to PyBase that contains installation and a sample code (you can also see it in GH). Current PyBase version and status: ( v0.1.0 - Beta ).","title":"Getting Started"},{"location":"getting-started/#installing-pybase","text":"Before starting, you have to know that PyBase doesn't have support for Python 2.7, only Python 3 onwards. PyBase can be installed through pip with the following command. pip install pybase_db","title":"Installing PyBase"},{"location":"getting-started/#creating-our-first-db-with-pybase","text":"With the example extracted from GH, we can do the following. #-------------- Importing PyBase Class --------------------------------------- # Lets import PyBase Class from PyBase Package from pybase_db import PyBase # #-------------- Initializing PyBase ------------------------------------------ # Lets define our database name and format (with default db_path). # db_type isn't case sensitive. You can use JSON and json and it'll be valid. db = PyBase ( \"example\" , \"JSON\" ) #=> ./example.json # #-------------- Using Insert Method ------------------------------------------ # Lets define and add some content to our database. pybase_info = { \"pybase\" : \"awesomeness\" , \"version\" : \"0.1.0\" } # Lets insert the defined dict inside our database. db . insert ( pybase_info ) #=> {'pybase': 'awesomeness', 'version': '0.1.0'} print ( db . read ()) # #-------------- Using Delete Method ------------------------------------------ # Lets delete an object inside our database cuz it's useless. db . delete ( 'pybase' ) #=> {'version': '0.1.0'} print ( db . read ()) # #-------------- Using Fetch Method ------------------------------------------- # Lets fetch an object inside our database and display its type. # It's useful to debug and manipulate the data dynamically. print ( db . fetch ( 'version' ))","title":"Creating our first db with pybase"},{"location":"docs/pybase/","text":"PyBase Class \u00b6 Attributes \u00b6 Methods \u00b6 delete(obj) Delete a object from the database established in PyBase init. exists(database: str, db_type: str) Fetch if the given database exists. fetch(obj: str, sub=None) Fetch an object and its sub_objects inside the database established in PyBase init. insert(content: dict) Insert a dictionary content inside the given database file. read() Read the database file established in PyBase init to to access its objects. init(database: str, db_type: str, db_path: str = pathlib.Path().absolute()) \u00b6 Define the database to use and create it if it doesn't exist. Parameters \u00b6 database : str The name of the database without extension. db_type : str The database type. Available types: JSON , YAML , SQLite db_path : str The path where the database is located (default is current working directory). Example: /home/bloodbath/Desktop/PyBase Note: db_type isn't case sensitive, you can use lowercase or uppercase. Raises \u00b6 TypeError If database or db_type isn't a String. ValueError If the given db_type isn't a valid type ( JSON , YAML , SQLite ). FileNotFoundError If the given path wasn't found. Example \u00b6 PyBase ( \"users\" , \"JSON\" ) #=> ./users.json delete(self, obj) \u00b6 Delete a object from the database established in PyBase init. Parameters \u00b6 obj The object which will be deleted from the database. Raises \u00b6 KeyError If key isn't found. ValueError If obj doesn't have a value (is equal to zero or None). Example \u00b6 # {'bloodbath': 'dev', 'night': 'tester'} delete ( 'bloodbath' ) #=> {'night': 'tester'} exists(self, database: str, db_path: str = pathlib.Path().absolute()) \u00b6 Fetch if the given database exists. Parameters \u00b6 database : str The name of the database with extension . db_path : str The path where the database is located (default is current working directory). Example: /home/bloodbath/Desktop/PyBase Raises \u00b6 TypeError If database or db_path isn't a String. Returns \u00b6 bool Returns True or False depending on if the database given exists in the given path. Example \u00b6 # /home/bloodbath/Desktop/PyBase/config.yaml exists ( 'config.yaml' ) #=> True / False fetch(self, obj: str, sub: dict = None) \u00b6 Fetch an object and its sub_objects inside the database established in PyBase init. Parameters \u00b6 obj : str The object which will be fetched inside the database. sub : dict, optional The sub_object(s) of the object which will be fetched inside the database. Note: sub cannot contain more than 5 objects or nested dictionaries for now. Raises \u00b6 TypeError If obj isn't a String or if sub isn't a list. ValueError If sub have more than 5 objects inside. KeyError If sub doesn't exist in the database. Returns \u00b6 str If the object or sub_objects are a String. int If the object or sub_objects are a Integer. float If the object or sub_objects are a Float. bool If the object or sub_objects are a Boolean. Example \u00b6 #----- Fetch without sub_objects ------------------------------------- # {'user': 'bloodbath'} fetch ( 'user' ) #=> <class 'str'> #----- Fetch with sub_objects ---------------------------------------- # When searching for sub_objects, it's recommended to set a value of # None to the objects, since their value doesn't affect the search. # # {'users': { # 'bloodbath': 12345, # 'night': 67890 # } # } fetch ( 'user' , { 'night' : None }) #=> <class 'int'> insert(self, content: dict) \u00b6 Insert a dictionary content inside the database file established in PyBase init. Parameters \u00b6 content : dict The content which will be inserted inside the database. Raises \u00b6 TypeError If content isn't a dictionary. Example \u00b6 # {} insert ({ 'dev' : 'bloodbath' }) #=> {'dev': 'bloodbath'} read() \u00b6 Read the database file established in PyBase init to access its objects. Note: this method isn't for writing purposes. To add objects to your db, please use insert . Parameters \u00b6 Raises \u00b6 Returns \u00b6 dict A dictionary which contains all the database objects. Example \u00b6 # {'editors': { # 'GUI': 'VSC', # 'TUI': 'Neovim' # } # } # #----- Reading the entire database ----------------------- read () #=> {'editors': {'GUI': 'VSC', 'TUI': 'Neovim'}} #----- Reading the GUI object ---------------------------- read ()[ 'editors' ][ 'GUI' ] #=> {'GUI': 'VSC'}","title":"PyBase Class"},{"location":"docs/pybase/#pybase-class","text":"","title":"PyBase Class"},{"location":"docs/pybase/#attributes","text":"","title":"Attributes"},{"location":"docs/pybase/#methods","text":"delete(obj) Delete a object from the database established in PyBase init. exists(database: str, db_type: str) Fetch if the given database exists. fetch(obj: str, sub=None) Fetch an object and its sub_objects inside the database established in PyBase init. insert(content: dict) Insert a dictionary content inside the given database file. read() Read the database file established in PyBase init to to access its objects.","title":"Methods"},{"location":"docs/pybase/#initdatabase-str-db_type-str-db_path-str-pathlibpathabsolute","text":"Define the database to use and create it if it doesn't exist.","title":"init(database: str, db_type: str, db_path: str = pathlib.Path().absolute())"},{"location":"docs/pybase/#parameters","text":"database : str The name of the database without extension. db_type : str The database type. Available types: JSON , YAML , SQLite db_path : str The path where the database is located (default is current working directory). Example: /home/bloodbath/Desktop/PyBase Note: db_type isn't case sensitive, you can use lowercase or uppercase.","title":"Parameters"},{"location":"docs/pybase/#raises","text":"TypeError If database or db_type isn't a String. ValueError If the given db_type isn't a valid type ( JSON , YAML , SQLite ). FileNotFoundError If the given path wasn't found.","title":"Raises"},{"location":"docs/pybase/#example","text":"PyBase ( \"users\" , \"JSON\" ) #=> ./users.json","title":"Example"},{"location":"docs/pybase/#deleteself-obj","text":"Delete a object from the database established in PyBase init.","title":"delete(self, obj)"},{"location":"docs/pybase/#parameters_1","text":"obj The object which will be deleted from the database.","title":"Parameters"},{"location":"docs/pybase/#raises_1","text":"KeyError If key isn't found. ValueError If obj doesn't have a value (is equal to zero or None).","title":"Raises"},{"location":"docs/pybase/#example_1","text":"# {'bloodbath': 'dev', 'night': 'tester'} delete ( 'bloodbath' ) #=> {'night': 'tester'}","title":"Example"},{"location":"docs/pybase/#existsself-database-str-db_path-str-pathlibpathabsolute","text":"Fetch if the given database exists.","title":"exists(self, database: str, db_path: str = pathlib.Path().absolute())"},{"location":"docs/pybase/#parameters_2","text":"database : str The name of the database with extension . db_path : str The path where the database is located (default is current working directory). Example: /home/bloodbath/Desktop/PyBase","title":"Parameters"},{"location":"docs/pybase/#raises_2","text":"TypeError If database or db_path isn't a String.","title":"Raises"},{"location":"docs/pybase/#returns","text":"bool Returns True or False depending on if the database given exists in the given path.","title":"Returns"},{"location":"docs/pybase/#example_2","text":"# /home/bloodbath/Desktop/PyBase/config.yaml exists ( 'config.yaml' ) #=> True / False","title":"Example"},{"location":"docs/pybase/#fetchself-obj-str-sub-dict-none","text":"Fetch an object and its sub_objects inside the database established in PyBase init.","title":"fetch(self, obj: str, sub: dict = None)"},{"location":"docs/pybase/#parameters_3","text":"obj : str The object which will be fetched inside the database. sub : dict, optional The sub_object(s) of the object which will be fetched inside the database. Note: sub cannot contain more than 5 objects or nested dictionaries for now.","title":"Parameters"},{"location":"docs/pybase/#raises_3","text":"TypeError If obj isn't a String or if sub isn't a list. ValueError If sub have more than 5 objects inside. KeyError If sub doesn't exist in the database.","title":"Raises"},{"location":"docs/pybase/#returns_1","text":"str If the object or sub_objects are a String. int If the object or sub_objects are a Integer. float If the object or sub_objects are a Float. bool If the object or sub_objects are a Boolean.","title":"Returns"},{"location":"docs/pybase/#example_3","text":"#----- Fetch without sub_objects ------------------------------------- # {'user': 'bloodbath'} fetch ( 'user' ) #=> <class 'str'> #----- Fetch with sub_objects ---------------------------------------- # When searching for sub_objects, it's recommended to set a value of # None to the objects, since their value doesn't affect the search. # # {'users': { # 'bloodbath': 12345, # 'night': 67890 # } # } fetch ( 'user' , { 'night' : None }) #=> <class 'int'>","title":"Example"},{"location":"docs/pybase/#insertself-content-dict","text":"Insert a dictionary content inside the database file established in PyBase init.","title":"insert(self, content: dict)"},{"location":"docs/pybase/#parameters_4","text":"content : dict The content which will be inserted inside the database.","title":"Parameters"},{"location":"docs/pybase/#raises_4","text":"TypeError If content isn't a dictionary.","title":"Raises"},{"location":"docs/pybase/#example_4","text":"# {} insert ({ 'dev' : 'bloodbath' }) #=> {'dev': 'bloodbath'}","title":"Example"},{"location":"docs/pybase/#read","text":"Read the database file established in PyBase init to access its objects. Note: this method isn't for writing purposes. To add objects to your db, please use insert .","title":"read()"},{"location":"docs/pybase/#parameters_5","text":"","title":"Parameters"},{"location":"docs/pybase/#raises_5","text":"","title":"Raises"},{"location":"docs/pybase/#returns_2","text":"dict A dictionary which contains all the database objects.","title":"Returns"},{"location":"docs/pybase/#example_5","text":"# {'editors': { # 'GUI': 'VSC', # 'TUI': 'Neovim' # } # } # #----- Reading the entire database ----------------------- read () #=> {'editors': {'GUI': 'VSC', 'TUI': 'Neovim'}} #----- Reading the GUI object ---------------------------- read ()[ 'editors' ][ 'GUI' ] #=> {'GUI': 'VSC'}","title":"Example"}]}